{
	"info": {
		"_postman_id": "30887369-4051-414f-8baa-72735a042f07",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"check string\", function(){\r",
							"    pm.expect(responseBody).to.eql(\"This is the first responce from server!\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "dmitry",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"dmk1313\")\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"28\")\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000000)\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name req\", function(){\r",
							"    pm.expect(jsonData.name).to.eql(req.name)\r",
							"})\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age req\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"})\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary req\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"check u_salary_1_5_year\", function(){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(jsonData.salary*4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "dmk1313",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(req.name).to.eql(jsonData.name)\r",
							"})\r",
							"console.log(req.name)\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(req.age)\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary\", function(){\r",
							"    pm.expect(jsonData.salary).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"check dog_name\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"check dog_age\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"check name_Luky\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"check age_4\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=dmk1313&age=28&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "dmk1313"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function(){\r",
							"    pm.expect(req.name).to.eql(jsonData.name)\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age\", function(){\r",
							"    pm.expect(jsonData.age).to.eql(+req.age)\r",
							"})\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check salary response equals salary req\", function(){\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary response equals salary req*2\", function(){\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(req.salary*2)\r",
							"})\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check salary response equals salary req*3\", function(){\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(req.salary*3)\r",
							"})\r",
							"//18. Передать в окружение переменную name\r",
							"let name = jsonData.name\r",
							"pm.environment.set(\"name\", name)\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"let age = jsonData.age\r",
							"pm.environment.set(\"age\", age)\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"let salary = jsonData.salary\r",
							"pm.environment.set(\"salary\", salary)\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"salary.forEach(parm => { \r",
							"    console.log(parm)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=dmk1313&age=28&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "dmk1313"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check start_qa_salary\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check qa_salary_after_6_months\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check qa_salary_after_12_months\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check qa_salary_after_3.5_years\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"check person\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check start_qa_salary equals salary req\", function(){\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req.salary)\r",
							"})\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_6_months equals salary req\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req.salary*2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_12_months equals salary req\", function(){\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req.salary*2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_1.5_year equals salary req\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+req.salary*3.3)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_3.5_years equals salary req\", function(){\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+req.salary*3.8)\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check person 1st element from u_name equals salary req\", function(){\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check u_age equals age req\", function(){\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"check u_salary_5_years equals salary req\", function(){\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2)\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(let el in jsonData.person){\r",
							"    console.log(el, jsonData.person[el])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary2}}",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"contentType": "",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"contentType": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}