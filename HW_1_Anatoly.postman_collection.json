{
	"info": {
		"_postman_id": "56e8dac8-3872-489d-98ef-52d9c2774454",
		"name": "HW_1_Anatoly",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20455068"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Name: 3-40 символов включительно, запрещены префиксные и постфиксные пробелы. Поле обязательное\r",
							"// 2) Age: только целые цифры в диапазоне 18-120 включительно. Поле обязательное\r",
							"// 3) Salary: только целые цифры в диапазоне 1-1000000 включительно. Поле обязательное\r",
							"\r",
							"function nameValidation(value) {\r",
							"    if(value && value.length > 2 && value.length < 41 && value.trim() == value) {\r",
							"        return true\r",
							"    } else return false\r",
							"} \r",
							"function ageValidation(value) {\r",
							"  if(value && !isNaN(value) && value > 17 && value < 121 && Number.isInteger(+value)) {\r",
							"      return true\r",
							"  } else return false\r",
							"}\r",
							"\r",
							" function salaryValidation(value) {\r",
							"     if(value && !isNaN(value) && value > 0 && value < 11000001 && Number.isInteger(+value)) {\r",
							"         return true\r",
							"     } else return false\r",
							" }\r",
							"\r",
							"function validator() {\r",
							"    return nameValidation(name) && ageValidation(age) && salaryValidation(salary) ? true : false\r",
							"}\r",
							"let name = pm.iterationData.get('name')\r",
							"let age = pm.iterationData.get('age')\r",
							"let salary = pm.iterationData.get('salary')\r",
							"\r",
							"\r",
							"if(validator()) {\r",
							"    pm.test(`Expect status 200 with name = \"${name}\", age = \"${age}\" and salary = \"${salary}\"`, () => {\r",
							"         pm.response.to.have.status(200);\r",
							"    }) \r",
							"} else {\r",
							"     pm.test(`Expect NOT to have status 200 with name = \"${name}\", age = \"${age}\" and salary = \"${salary}\"`, () => {\r",
							"         pm.response.to.not.have.status(200);\r",
							"    })  \r",
							"}\r",
							"console.log(validator())\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. http://162.55.220.72:5007/object_info_4\r",
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, \r",
							"// в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"let resp_sal = pm.response.json().salary\r",
							"let req_sal = pm.request.url.query.get(\"salary\")\r",
							"\r",
							"for(let i = 0; i < resp_sal.length; i++){\r",
							"    pm.test(`req_sal*${i+1} ${req_sal} == resp_sal ${resp_sal[i]}`, function() {\r",
							"        pm.expect(+req_sal*(i+1)).to.eql(+resp_sal[i])\r",
							"    })\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=dmk1313&age=28&salary=1000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "dmk1313"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "1000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//3. http://162.55.220.72:5005/object_info_3\r",
							"//Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, \r",
							"//чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"let req_sal = +pm.request.url.query.get(\"salary\")\r",
							"let req_age = +pm.request.url.query.get(\"age\")\r",
							"let req_name = pm.request.url.query.get(\"name\")\r",
							"\r",
							"const req_obj = {\r",
							"    name: req_name,\r",
							"    age: req_age,\r",
							"    salary: req_sal\r",
							"}\r",
							"\r",
							"let resp_sal = +pm.response.json().salary\r",
							"let resp_age = +pm.response.json().age\r",
							"let resp_name = pm.response.json().name\r",
							"\r",
							"const resp_obj = {\r",
							"    name: resp_name,\r",
							"    age: resp_age,\r",
							"    salary: resp_sal\r",
							"}\r",
							"\r",
							"pm.test(\"resp_obj == req_obj\", function(){\r",
							"    pm.expect(req_obj).to.deep.equal(resp_obj)\r",
							"})\r",
							"\r",
							"console.log(resp_obj)\r",
							"console.log(req_obj)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=dmk1313&age=28&salary=10000000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "dmk1313"
						},
						{
							"key": "age",
							"value": "28"
						},
						{
							"key": "salary",
							"value": "10000000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 4. http://162.55.220.72:5005/user_info_2\r",
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, \r",
							"// чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). \r",
							"\r",
							"let arr = []\r",
							"const resp = pm.response.json()\r",
							"\r",
							"for(const key in pm.response.json()){\r",
							"    arr.push(key)\r",
							"}\r",
							"\r",
							"arr.forEach((e) => {\r",
							"    pm.test(`response has ${e}`, function(){\r",
							"        pm.expect(resp).to.have.property(e)\r",
							"    })\r",
							"}) \r",
							"//console.log(arr)\r",
							"\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле \r",
							"// (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"\r",
							"const count = ['', 3.3, 2.7, 3.8, 2, 1]\r",
							"\r",
							"// arr.forEach((e, i) => {\r",
							"//     if (e != \"person\")\r",
							"//     pm.test(`response has ${e}`, function(){\r",
							"//         pm.expect(+resp[e]).to.eql(1000000*count[i])\r",
							"//     })\r",
							"// }) \r",
							"// console.log(arr)\r",
							"\r",
							"const count1 = {\"person\": \"\", \r",
							"                \"start_qa_salary\" : 1, \r",
							"                \"qa_salary_after_6_months\" : 2,\r",
							"                \"qa_salary_after_12_months\": 2.7, \r",
							"                \"qa_salary_after_1.5_year\": 3.3, \r",
							"                \"qa_salary_after_3.5_years\" : 3.8, \r",
							"}\r",
							"\r",
							"const salary = 1000000\r",
							"\r",
							"for(const key in count1){\r",
							"    pm.test(`response has ${key}`, () => {\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"    if(key != 'person'){\r",
							"        pm.test(`${key} = ${salary} * ${count1[key]}`, () => {\r",
							"            pm.expect(resp[key]).to.eql(count1[key]*salary)\r",
							"        })\r",
							"    }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "dmk1313",
							"type": "text"
						},
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}